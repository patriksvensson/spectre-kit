{"interfaceLanguages":{"swift":[{"children":[{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/spectrekit\/renderable\/measure(options:maxwidth:)","title":"func measure(options: RenderOptions, maxWidth: Int) -> Measurement","type":"method"},{"path":"\/documentation\/spectrekit\/renderable\/render(options:maxwidth:)","title":"func render(options: RenderOptions, maxWidth: Int) -> [Segment]","type":"method"}],"path":"\/documentation\/spectrekit\/renderable","title":"Renderable","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/spectrekit\/decoration\/init(rawvalue:)","title":"init(rawValue: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/spectrekit\/decoration\/rawvalue","title":"let rawValue: Int","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/spectrekit\/decoration\/bold","title":"static let bold: Decoration","type":"property"},{"path":"\/documentation\/spectrekit\/decoration\/conceal","title":"static let conceal: Decoration","type":"property"},{"path":"\/documentation\/spectrekit\/decoration\/dim","title":"static let dim: Decoration","type":"property"},{"path":"\/documentation\/spectrekit\/decoration\/invert","title":"static let invert: Decoration","type":"property"},{"path":"\/documentation\/spectrekit\/decoration\/italic","title":"static let italic: Decoration","type":"property"},{"path":"\/documentation\/spectrekit\/decoration\/rapidblink","title":"static let rapidBlink: Decoration","type":"property"},{"path":"\/documentation\/spectrekit\/decoration\/slowblink","title":"static let slowBlink: Decoration","type":"property"},{"path":"\/documentation\/spectrekit\/decoration\/strikethrough","title":"static let strikethrough: Decoration","type":"property"},{"path":"\/documentation\/spectrekit\/decoration\/underline","title":"static let underline: Decoration","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/spectrekit\/decoration\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/spectrekit\/decoration\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/spectrekit\/decoration\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/spectrekit\/decoration\/contains(_:)","title":"func contains(Self) -> Bool","type":"method"},{"path":"\/documentation\/spectrekit\/decoration\/formintersection(_:)","title":"func formIntersection(Self)","type":"method"},{"path":"\/documentation\/spectrekit\/decoration\/formsymmetricdifference(_:)","title":"func formSymmetricDifference(Self)","type":"method"},{"path":"\/documentation\/spectrekit\/decoration\/formunion(_:)","title":"func formUnion(Self)","type":"method"},{"path":"\/documentation\/spectrekit\/decoration\/insert(_:)","title":"func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)","type":"method"},{"path":"\/documentation\/spectrekit\/decoration\/intersection(_:)","title":"func intersection(Self) -> Self","type":"method"},{"path":"\/documentation\/spectrekit\/decoration\/remove(_:)","title":"func remove(Self.Element) -> Self.Element?","type":"method"},{"path":"\/documentation\/spectrekit\/decoration\/symmetricdifference(_:)","title":"func symmetricDifference(Self) -> Self","type":"method"},{"path":"\/documentation\/spectrekit\/decoration\/union(_:)","title":"func union(Self) -> Self","type":"method"},{"path":"\/documentation\/spectrekit\/decoration\/update(with:)","title":"func update(with: Self.Element) -> Self.Element?","type":"method"}],"path":"\/documentation\/spectrekit\/decoration\/optionset-implementations","title":"OptionSet Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/spectrekit\/decoration\/init(_:)","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/spectrekit\/decoration\/init(arrayliteral:)","title":"init(arrayLiteral: Self.Element...)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/spectrekit\/decoration\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/spectrekit\/decoration\/isdisjoint(with:)","title":"func isDisjoint(with: Self) -> Bool","type":"method"},{"path":"\/documentation\/spectrekit\/decoration\/isstrictsubset(of:)","title":"func isStrictSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/spectrekit\/decoration\/isstrictsuperset(of:)","title":"func isStrictSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/spectrekit\/decoration\/issubset(of:)","title":"func isSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/spectrekit\/decoration\/issuperset(of:)","title":"func isSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/spectrekit\/decoration\/subtract(_:)","title":"func subtract(Self)","type":"method"},{"path":"\/documentation\/spectrekit\/decoration\/subtracting(_:)","title":"func subtracting(Self) -> Self","type":"method"}],"path":"\/documentation\/spectrekit\/decoration\/setalgebra-implementations","title":"SetAlgebra Implementations","type":"symbol"}],"path":"\/documentation\/spectrekit\/decoration","title":"Decoration","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/spectrekit\/measurement\/max","title":"let max: Int","type":"property"},{"path":"\/documentation\/spectrekit\/measurement\/min","title":"let min: Int","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/spectrekit\/measurement\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/spectrekit\/measurement\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/spectrekit\/measurement","title":"Measurement","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/spectrekit\/paragraph\/init()","title":"init()","type":"init"},{"path":"\/documentation\/spectrekit\/paragraph\/init(text:style:)","title":"init(text: String, style: Style?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/spectrekit\/paragraph\/append(text:style:)","title":"func append(text: String, style: Style?)","type":"method"},{"path":"\/documentation\/spectrekit\/paragraph\/measure(options:maxwidth:)","title":"func measure(options: RenderOptions, maxWidth: Int) -> Measurement","type":"method"},{"path":"\/documentation\/spectrekit\/paragraph\/render(options:maxwidth:)","title":"func render(options: RenderOptions, maxWidth: Int) -> [Segment]","type":"method"},{"path":"\/documentation\/spectrekit\/paragraph\/splitlines(maxwidth:)","title":"func splitLines(maxWidth: Int) -> [SegmentLine]","type":"method"}],"path":"\/documentation\/spectrekit\/paragraph","title":"Paragraph","type":"struct"},{"path":"\/documentation\/spectrekit\/renderoptions","title":"RenderOptions","type":"struct"},{"path":"\/documentation\/spectrekit\/segmentline","title":"SegmentLine","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/spectrekit\/segmentlineiterator\/init(lines:)","title":"init(lines: [SegmentLine])","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/spectrekit\/segmentlineiterator\/next()","title":"func next() -> Segment?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/spectrekit\/segmentlineiterator\/element","title":"SegmentLineIterator.Element","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/spectrekit\/segmentlineiterator\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/spectrekit\/segmentlineiterator\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/spectrekit\/segmentlineiterator\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/spectrekit\/segmentlineiterator\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/spectrekit\/segmentlineiterator\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/spectrekit\/segmentlineiterator\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/spectrekit\/segmentlineiterator\/contains(_:)","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/spectrekit\/segmentlineiterator\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/spectrekit\/segmentlineiterator\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/spectrekit\/segmentlineiterator\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/spectrekit\/segmentlineiterator\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/spectrekit\/segmentlineiterator\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/spectrekit\/segmentlineiterator\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/spectrekit\/segmentlineiterator\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/spectrekit\/segmentlineiterator\/filter(_:)-6zeap","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/spectrekit\/segmentlineiterator\/filter(_:)-77rlw","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/spectrekit\/segmentlineiterator\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/spectrekit\/segmentlineiterator\/flatmap(_:)-45m9s","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/spectrekit\/segmentlineiterator\/flatmap(_:)-728bt","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/spectrekit\/segmentlineiterator\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/spectrekit\/segmentlineiterator\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/spectrekit\/segmentlineiterator\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/spectrekit\/segmentlineiterator\/makeiterator()","title":"func makeIterator() -> Self","type":"method"},{"path":"\/documentation\/spectrekit\/segmentlineiterator\/map(_:)","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/spectrekit\/segmentlineiterator\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/spectrekit\/segmentlineiterator\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/spectrekit\/segmentlineiterator\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/spectrekit\/segmentlineiterator\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/spectrekit\/segmentlineiterator\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/spectrekit\/segmentlineiterator\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/spectrekit\/segmentlineiterator\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/spectrekit\/segmentlineiterator\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/spectrekit\/segmentlineiterator\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/spectrekit\/segmentlineiterator\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/spectrekit\/segmentlineiterator\/sorted(using:)-7w7b0","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/spectrekit\/segmentlineiterator\/sorted(using:)-8ie2p","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/spectrekit\/segmentlineiterator\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/spectrekit\/segmentlineiterator\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/spectrekit\/segmentlineiterator\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/spectrekit\/segmentlineiterator\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/spectrekit\/segmentlineiterator\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/spectrekit\/segmentlineiterator\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/spectrekit\/segmentlineiterator\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/spectrekit\/segmentlineiterator","title":"SegmentLineIterator","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/spectrekit\/style\/init(foreground:background:decoration:)","title":"init(foreground: Color?, background: Color?, decoration: Decoration?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/spectrekit\/style\/background","title":"let background: Color?","type":"property"},{"path":"\/documentation\/spectrekit\/style\/decoration","title":"let decoration: Decoration","type":"property"},{"path":"\/documentation\/spectrekit\/style\/foreground","title":"let foreground: Color?","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/spectrekit\/style\/plain","title":"static let plain: Style","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/spectrekit\/style\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/spectrekit\/style\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/spectrekit\/style","title":"Style","type":"struct"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/spectrekit\/color\/default","title":"case `default`","type":"case"},{"path":"\/documentation\/spectrekit\/color\/number(_:)","title":"case number(UInt8)","type":"case"},{"path":"\/documentation\/spectrekit\/color\/rgb(_:_:_:)","title":"case rgb(UInt8, UInt8, UInt8)","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/spectrekit\/color\/isdefault","title":"var isDefault: Bool","type":"property"},{"path":"\/documentation\/spectrekit\/color\/system","title":"var system: ColorSystem","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/spectrekit\/color\/downgrade(to:)","title":"func downgrade(to: ColorSystem) -> Color","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/spectrekit\/color\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/spectrekit\/color\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/spectrekit\/color","title":"Color","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/spectrekit\/colorsystem\/eightbit","title":"case eightBit","type":"case"},{"path":"\/documentation\/spectrekit\/colorsystem\/standard","title":"case standard","type":"case"},{"path":"\/documentation\/spectrekit\/colorsystem\/truecolor","title":"case trueColor","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/spectrekit\/colorsystem\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/spectrekit\/colorsystem\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/spectrekit\/colorsystem","title":"ColorSystem","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/spectrekit\/segment\/controlsequence(code:)","title":"case controlSequence(code: String)","type":"case"},{"path":"\/documentation\/spectrekit\/segment\/empty","title":"case empty","type":"case"},{"path":"\/documentation\/spectrekit\/segment\/linebreak","title":"case lineBreak","type":"case"},{"path":"\/documentation\/spectrekit\/segment\/text(content:style:)","title":"case text(content: String, style: Style?)","type":"case"},{"path":"\/documentation\/spectrekit\/segment\/whitespace(content:)","title":"case whitespace(content: String)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/spectrekit\/segment\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/spectrekit\/segment\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/spectrekit\/segment","title":"Segment","type":"enum"}],"path":"\/documentation\/spectrekit","title":"SpectreKit","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":1}}